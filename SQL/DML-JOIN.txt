JOIN
연관된 튜플들을 결합하여, 하나의 새로운 릴레이션을 반환한다
join은 일반적으로 FROM절에 기술하지만, 릴레이션이 사용되는 곳 어디에나 사용할 수 있다.
JOIN은 크게 INNER JOIN 과 OUTER JOIN으로 구분된다
===========================================================================================================
INNER JOIN
예) <학생> 테이블과 <성적등급>테이블을 JOIN하여 각 학생의 '학번', '이름', '성적', '등급'을 출력하는 SQL문을 작성하시오
    SELECT 학번,이름,성적,등급
    FROM 학생, 성적등급
    WHERE 학생.성적, BETWEEN 성적등급.최저 AND 성적등급.최고
===========================================================================================================
OUTER JOIN

LEFT OUTER JOIN : INNER JOIN의 결과를 구한 후, 우측 항 릴레이션의 어떤 튜플과도 맞지 않는 좌측 항의 릴레이션에 있는 튜플들에
                  NULL값을 붙여서 INNER JOIN의 결과에 추가한다

표기 형식
SELECT [테이블명1].속성명, [테이블명2].속성명,
FROM 테이블명1 LEFT JOIN 테이블명2
ON 테이블명1.속성명 = 테이블명2.속성명;

SELECT [테이블명1].속성명, [테이블명2].속성명,
FROM 테이블명1 LEFT JOIN 테이블명2
WHERE 테이블명1.속성명 = 테이블명2.속성명(+);

RIGHT OUTER JOIN : INNER JOIN의 결과를 구한 후, 좌측 항 릴레이션의 어떤 튜플과도 맞지 않는 우측 항의 릴레이션에 있는 튜플들에
                  NULL값을 붙여서 INNER JOIN의 결과에 추가한다

표기 형식
SELECT [테이블명1].속성명, [테이블명2].속성명,
FROM 테이블명1 RIGHT JOIN 테이블명2
ON 테이블명1.속성명 = 테이블명2.속성명;

SELECT [테이블명1].속성명, [테이블명2].속성명,
FROM 테이블명1 RIGHT JOIN 테이블명2
WHERE 테이블명1.속성명(+) = 테이블명2.속성명;

