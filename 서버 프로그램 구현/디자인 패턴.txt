디자인 패턴 : 모듈 간의 관계 및 인터페이스를 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예제

패턴의 종류
1. 생성 패턴
2. 구조 패턴
3. 디자인 패턴

생성 패턴 : 클래스나 객체의 생성과 참조 과정을 정의하는 패턴이다.
추상 팩토리(Abstract Factory) : 구체적인 클래스에 의존하지 않고, 인터페이스를 통해 서로 연관 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현함
                               연관된 서브 클래스를 묶어 한 번에 교체하는 것이 가능함

빌더(Builder) : 작게 분리된 인스턴스를 건축 하듯이 조합하여 객체를 생성함
                객체의 생성 과정과 표현 방법을 분리하고 있어, 동일한 객체 생성에서도 서로 다른 결과를 만들어 낼 수 있음

팩토리 매소드(Factory Method) :  객체 생성을 서브 클래스에서 처리하도록 분리하여 캡슐화한 패턴
                                상위 클래스에서 인터페이스만 정의하고 실제 생성은 서브 클래스가 담당함
                                가상 생성자 (Virtual Constructor)패턴이라고도 함

프로토타입(Prototype) : 원본 객체를 복제하는 방법으로 객체를 생성하는 패턴
                       일반적인 방법으로 객체를 생성하며, 비용이 큰 경우 주로 이용함

싱글톤(Singleton) : 하나의 객체를 생성하면 생성된 객체를 어디서든 참조할 수 있지만, 여러 프로세스가 동시에 참조할 수는 없음
                   클래스 내에서 인스턴스가 하나뿐임을 보장하며, 불필요한 메모리 낭비를 최소화 할 수 있음
=====================================================================================================================================================
구조 패턴 : 클래스나 객체들을 조합하여 더 큰 구조로 만드는 패턴이다.
어댑터(Adapter) : 호환성이 없는 클래스들의 인터페이스를 다른 클래스가 이용할 수 없도록 변환해주는 패턴
                  기존의 클래스를 이용하고 싶지만 인터페이스가 일치하지 않을 때 이용함

브리지(Bridge) : 구현부에서 추상층을 분리하여, 서로가 독립적으로 확장할 수 있도록 구성한 패턴
                 기능과 구현을 두 개의 별도 클래스로 구현함

컴포지트(Composite) : 여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용하는 패턴
                      객체들을 트리 구조로 구성하여 디랙토리 안에 디렉토리가 있듯이 복합 객체 안에 복합 객체가 포함되는 구조를 구현할 수 있음

데코레이터(Decorater) : 객체간의 결합을 통해 능동적으로 기능들을 확장할 수 있는 패턴
                       임의의 객체에 부가적인 기능을 추가하기 위해 다른 객체들을 덧붙히는 방식으로 구현함

퍼싸드(Facade) : 복잡한 서브 클래스들을 피해 더 상위에 인터페이스를 구성함으로써 서브 클래스들의 기능을 간편하게 사용할 수 있도록 하는 패턴
                서브 클래스들 사이의 통합 인터페이스를 제공하는 Wrapper객체가 필요함

플라이 웨이트(Flyweight) : 인스턴스가 필요할 때마다 매번 생성하는 것이 아니고 가능한 한 공유해서 사용함으로써 메모리를 절약하는 패턴
                          다수의 유사 객체를 생성하거나 조작할 때 유용하게 사용할 수 있음

프록시(Proxy) : 접근이 어려운 객체와 여기에 연결하려는 객체 사이에서 인터페이스 역할을 수행하는 패턴으로 대리자라고도 불림
               내부에서는 객체간의 복잡한 관계를 단순하게 정리하고 외부에서는 객체의 세부적인 내용을 숨김
=====================================================================================================================================================
행위 패턴 : 클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의하는 패턴
책임 연쇄(Chain of Responsibility) : 요청을 처리할 수 있는 객체가 둘 이상 존재하여 한 객체가 처리하지 못하면 다음 객체로 넘어가는 형태의 패턴
                                    요청을 처리할 수 있는 각 객체들이 고리로 묶여있어 요청이 해결될 때까지 고리를 따라 책임이 넘어감

커맨드(Command) : 요청을 객체의 형태로 캡슐화하여 재이용하거나 취소할 수 있도록 요청에 필요한 정보를 저장하거나 로그에 남기는 패턴
                 요청에 사용되는 각종 명령어들을 추상 클래스와 구체 클래스로 분리하여 단순화함

인터프리터(interpreter) : 언어에 문법 표현을 정의하는 패턴
                         SQL이나 통신 프로토콜과 같은 것을 개발할 때 사용함

반복자(Iterator) : 자료 구조와 같이 접근이 잦은 객체에 대해 동일한 인터페이스를 사용하도록 하는 패턴
                  내부 표현 방법의 노출 없이 순차적인 접근이 가능함

중재자(Mediator) : 수많은 객체들 간의 복잡한 상호작용을 캡슐화하여 객체로 정의하는 패턴
                  객체 사이의 의존성을 줄여 결합도를 감소시킬 수 있음

메멘토(Memento) : 특정 시점에서의 객체 내부 상태를 객체화함으로써 이후 요청에 따라 객체를 해당 시점의 상태로 돌릴 수 있는 기능을 제공하는 패턴
                  crtl+z와 같은 되돌리기 기능을 개발할 때 주로 이용함

옵저버(Observer) : 한 객체의 상태가 변화하면 객체에 상속되어 있는 다른 객체들에게 변화된 상태를 전달하는 패턴
                  일대다의 의존성을 정의함
                  주로 분산된 시스템 간에 이벤트를 생성 발행하고 이를 수신해야할 때 이용함

상태(State) : 객체의 상태에 따라 동일한 동작을 다르게 처리해야 할 때 사용하는 패턴
              객체 상태를 캡슐화하고 이를 참조하는 방식으로 처리함

전략(Strategy) : 동일한 계열의 알고리즘들을 개별적으로 캡술화하여 상호교환할 수 있게 정의하는 패턴
                 클라이언트는 독립적으로는 원하는 알고리즘을 선택하여 사용할 수 있으며, 클라이언틍레 영향 없이 알고리즘의 변경이 가능함

탬플릿 메소드(Template Method) : 상위 클래스에서 골격을 정의하고, 하위 클래스에서 세부 처리를 구체화하는 구조의 패턴
                                유사한 서브 클래스를 묶어 공통된 내용을 상위 클래스에서 정의함으로써 코드의 양을 줄이고 유지보수를 용이하게 해줌

방문자(Visitor) : 각 클래스들의 데이터 구조에서 처리 기능을 분리하여 별도의 클래스로 구성하는 패턴
                  분리된 처리 기능은 각 클래스를 방문하여 수행함
